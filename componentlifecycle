/////////////////////////////////////////LifecycleDemo.js////////////////////////////////////////
import React, { Component } from 'react';

class LifecycleDemo extends Component {
  constructor(props) {
    super(props);
    this.state = { count: 0 };
    console.log('Constructor: Component is being created.');
  }

  componentDidMount() {
    console.log('componentDidMount: Component has been mounted.');
    // Set up a timer to update state every second
    this.timer = setInterval(() => {
      this.setState((prevState) => ({ count: prevState.count + 1 }));
    }, 1000);
  }

  componentDidUpdate(prevProps, prevState) {
    console.log('componentDidUpdate: Component has been updated.');
    console.log('Previous state:', prevState);
    console.log('Current state:', this.state);
  }

  componentWillUnmount() {
    console.log('componentWillUnmount: Component is being removed.');
    clearInterval(this.timer); // Clean up the timer
  }

  render() {
    console.log('Render: Component is rendering.');
    return (
      <div>
        <h1>React Component Lifecycle</h1>
        <p>Count: {this.state.count}</p>
      </div>
    );
  }
}

export default LifecycleDemo;
//////////////////////////////////////////////App.js///////////////////////////
import React, { useState } from 'react';
import LifecycleDemo from './LifecycleDemo';

function App() {
  const [showComponent, setShowComponent] = useState(true);

  return (
    <div className="App">
      <h1>Component Lifecycle Demo</h1>
      <button onClick={() => setShowComponent(!showComponent)}>
        {showComponent ? 'Unmount Component' : 'Mount Component'}
      </button>
      {showComponent && <LifecycleDemo />}
    </div>
  );
}

export default App;
